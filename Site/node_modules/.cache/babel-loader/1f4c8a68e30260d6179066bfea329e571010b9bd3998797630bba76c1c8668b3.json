{"ast":null,"code":"import React,{useState}from\"react\";import Chessboard from\"chessboardjsx\";import{Chess}from\"chess.js\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const App=()=>{const[game]=useState(new Chess());const[fen,setFen]=useState(\"start\");const[turn,setTurn]=useState(\"w\");// 'w' for White, 'b' for Black\nconst onDrop=_ref=>{let{sourceSquare,targetSquare}=_ref;console.log(\"Legal moves:\",game.moves());// Log available moves\n// Allow a move only if it's the correct player's turn\nif(turn===game.turn()){const move=game.move({from:sourceSquare,to:targetSquare,promotion:\"q\"// Always promote to a queen for simplicity\n});// Check if the move is valid\nif(move){setFen(game.fen());// Update the board state with the new position\nsetTurn(turn===\"w\"?\"b\":\"w\");// Switch to the next player's turn\n}else{alert(`Invalid move from ${sourceSquare} to ${targetSquare}.`);}}else{alert(\"It's not your turn!\");}};return/*#__PURE__*/_jsxs(\"div\",{style:{textAlign:\"center\",padding:\"20px\"},children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Two-Player Chess\"}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Current turn: \",turn===\"w\"?\"White\":\"Black\"]}),/*#__PURE__*/_jsx(Chessboard,{position:fen,onDrop:onDrop,width:400})]});};export default App;","map":{"version":3,"names":["React","useState","Chessboard","Chess","jsx","_jsx","jsxs","_jsxs","App","game","fen","setFen","turn","setTurn","onDrop","_ref","sourceSquare","targetSquare","console","log","moves","move","from","to","promotion","alert","style","textAlign","padding","children","position","width"],"sources":["/home/mac/chess3p/Site/src/components/ChessGame.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Chessboard from \"chessboardjsx\";\nimport { Chess } from \"chess.js\";\n\nconst App = () => {\n  const [game] = useState(new Chess());\n  const [fen, setFen] = useState(\"start\");\n  const [turn, setTurn] = useState(\"w\"); // 'w' for White, 'b' for Black\n\n  const onDrop = ({ sourceSquare, targetSquare }) => {\n    console.log(\"Legal moves:\", game.moves()); // Log available moves\n\n    // Allow a move only if it's the correct player's turn\n    if (turn === game.turn()) {\n      const move = game.move({\n        from: sourceSquare,\n        to: targetSquare,\n        promotion: \"q\", // Always promote to a queen for simplicity\n      });\n\n      // Check if the move is valid\n      if (move) {\n        setFen(game.fen()); // Update the board state with the new position\n        setTurn(turn === \"w\" ? \"b\" : \"w\"); // Switch to the next player's turn\n      } else {\n        alert(`Invalid move from ${sourceSquare} to ${targetSquare}.`);\n      }\n    } else {\n      alert(\"It's not your turn!\");\n    }\n  };\n\n  return (\n    <div style={{ textAlign: \"center\", padding: \"20px\" }}>\n      <h1>Two-Player Chess</h1>\n      <p>Current turn: {turn === \"w\" ? \"White\" : \"Black\"}</p>\n      <Chessboard position={fen} onDrop={onDrop} width={400} />\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,MAAO,CAAAC,UAAU,KAAM,eAAe,CACtC,OAASC,KAAK,KAAQ,UAAU,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEjC,KAAM,CAAAC,GAAG,CAAGA,CAAA,GAAM,CAChB,KAAM,CAACC,IAAI,CAAC,CAAGR,QAAQ,CAAC,GAAI,CAAAE,KAAK,CAAC,CAAC,CAAC,CACpC,KAAM,CAACO,GAAG,CAAEC,MAAM,CAAC,CAAGV,QAAQ,CAAC,OAAO,CAAC,CACvC,KAAM,CAACW,IAAI,CAAEC,OAAO,CAAC,CAAGZ,QAAQ,CAAC,GAAG,CAAC,CAAE;AAEvC,KAAM,CAAAa,MAAM,CAAGC,IAAA,EAAoC,IAAnC,CAAEC,YAAY,CAAEC,YAAa,CAAC,CAAAF,IAAA,CAC5CG,OAAO,CAACC,GAAG,CAAC,cAAc,CAAEV,IAAI,CAACW,KAAK,CAAC,CAAC,CAAC,CAAE;AAE3C;AACA,GAAIR,IAAI,GAAKH,IAAI,CAACG,IAAI,CAAC,CAAC,CAAE,CACxB,KAAM,CAAAS,IAAI,CAAGZ,IAAI,CAACY,IAAI,CAAC,CACrBC,IAAI,CAAEN,YAAY,CAClBO,EAAE,CAAEN,YAAY,CAChBO,SAAS,CAAE,GAAK;AAClB,CAAC,CAAC,CAEF;AACA,GAAIH,IAAI,CAAE,CACRV,MAAM,CAACF,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC,CAAE;AACpBG,OAAO,CAACD,IAAI,GAAK,GAAG,CAAG,GAAG,CAAG,GAAG,CAAC,CAAE;AACrC,CAAC,IAAM,CACLa,KAAK,CAAC,qBAAqBT,YAAY,OAAOC,YAAY,GAAG,CAAC,CAChE,CACF,CAAC,IAAM,CACLQ,KAAK,CAAC,qBAAqB,CAAC,CAC9B,CACF,CAAC,CAED,mBACElB,KAAA,QAAKmB,KAAK,CAAE,CAAEC,SAAS,CAAE,QAAQ,CAAEC,OAAO,CAAE,MAAO,CAAE,CAAAC,QAAA,eACnDxB,IAAA,OAAAwB,QAAA,CAAI,kBAAgB,CAAI,CAAC,cACzBtB,KAAA,MAAAsB,QAAA,EAAG,gBAAc,CAACjB,IAAI,GAAK,GAAG,CAAG,OAAO,CAAG,OAAO,EAAI,CAAC,cACvDP,IAAA,CAACH,UAAU,EAAC4B,QAAQ,CAAEpB,GAAI,CAACI,MAAM,CAAEA,MAAO,CAACiB,KAAK,CAAE,GAAI,CAAE,CAAC,EACtD,CAAC,CAEV,CAAC,CAED,cAAe,CAAAvB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}