{"ast":null,"code":"var _jsxFileName = \"/home/mac/chess3p/Site/src/components/ChessGame.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Chessboard from \"chessboardjsx\";\nimport { Chess } from \"chess.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [game] = useState(new Chess());\n  const [fen, setFen] = useState(\"start\");\n  const [turn, setTurn] = useState(\"w\"); // 'w' for White, 'b' for Black\n\n  const onDrop = ({\n    sourceSquare,\n    targetSquare\n  }) => {\n    console.log(\"Legal moves:\", game.moves()); // Log available moves\n\n    // Allow a move only if it's the correct player's turn\n    if (turn === game.turn()) {\n      const move = game.move({\n        from: sourceSquare,\n        to: targetSquare,\n        promotion: \"q\" // Always promote to a queen for simplicity\n      });\n\n      // Check if the move is valid\n      if (move) {\n        setFen(game.fen()); // Update the board state with the new position\n        setTurn(turn === \"w\" ? \"b\" : \"w\"); // Switch to the next player's turn\n      } else {\n        alert(`Invalid move from ${sourceSquare} to ${targetSquare}.`);\n      }\n    } else {\n      alert(\"It's not your turn!\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: \"center\",\n      padding: \"20px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Two-Player Chess\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Current turn: \", turn === \"w\" ? \"White\" : \"Black\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Chessboard, {\n      position: fen,\n      onDrop: onDrop,\n      width: 400\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"BSQ2WcrZ+fdkfToqGvLGHgrQdx8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Chessboard","Chess","jsxDEV","_jsxDEV","App","_s","game","fen","setFen","turn","setTurn","onDrop","sourceSquare","targetSquare","console","log","moves","move","from","to","promotion","alert","style","textAlign","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","position","width","_c","$RefreshReg$"],"sources":["/home/mac/chess3p/Site/src/components/ChessGame.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Chessboard from \"chessboardjsx\";\nimport { Chess } from \"chess.js\";\n\nconst App = () => {\n  const [game] = useState(new Chess());\n  const [fen, setFen] = useState(\"start\");\n  const [turn, setTurn] = useState(\"w\"); // 'w' for White, 'b' for Black\n\n  const onDrop = ({ sourceSquare, targetSquare }) => {\n    console.log(\"Legal moves:\", game.moves()); // Log available moves\n\n    // Allow a move only if it's the correct player's turn\n    if (turn === game.turn()) {\n      const move = game.move({\n        from: sourceSquare,\n        to: targetSquare,\n        promotion: \"q\", // Always promote to a queen for simplicity\n      });\n\n      // Check if the move is valid\n      if (move) {\n        setFen(game.fen()); // Update the board state with the new position\n        setTurn(turn === \"w\" ? \"b\" : \"w\"); // Switch to the next player's turn\n      } else {\n        alert(`Invalid move from ${sourceSquare} to ${targetSquare}.`);\n      }\n    } else {\n      alert(\"It's not your turn!\");\n    }\n  };\n\n  return (\n    <div style={{ textAlign: \"center\", padding: \"20px\" }}>\n      <h1>Two-Player Chess</h1>\n      <p>Current turn: {turn === \"w\" ? \"White\" : \"Black\"}</p>\n      <Chessboard position={fen} onDrop={onDrop} width={400} />\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,UAAU,MAAM,eAAe;AACtC,SAASC,KAAK,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,IAAI,CAAC,GAAGP,QAAQ,CAAC,IAAIE,KAAK,CAAC,CAAC,CAAC;EACpC,MAAM,CAACM,GAAG,EAAEC,MAAM,CAAC,GAAGT,QAAQ,CAAC,OAAO,CAAC;EACvC,MAAM,CAACU,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;;EAEvC,MAAMY,MAAM,GAAGA,CAAC;IAAEC,YAAY;IAAEC;EAAa,CAAC,KAAK;IACjDC,OAAO,CAACC,GAAG,CAAC,cAAc,EAAET,IAAI,CAACU,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;;IAE3C;IACA,IAAIP,IAAI,KAAKH,IAAI,CAACG,IAAI,CAAC,CAAC,EAAE;MACxB,MAAMQ,IAAI,GAAGX,IAAI,CAACW,IAAI,CAAC;QACrBC,IAAI,EAAEN,YAAY;QAClBO,EAAE,EAAEN,YAAY;QAChBO,SAAS,EAAE,GAAG,CAAE;MAClB,CAAC,CAAC;;MAEF;MACA,IAAIH,IAAI,EAAE;QACRT,MAAM,CAACF,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QACpBG,OAAO,CAACD,IAAI,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC;MACrC,CAAC,MAAM;QACLY,KAAK,CAAC,qBAAqBT,YAAY,OAAOC,YAAY,GAAG,CAAC;MAChE;IACF,CAAC,MAAM;MACLQ,KAAK,CAAC,qBAAqB,CAAC;IAC9B;EACF,CAAC;EAED,oBACElB,OAAA;IAAKmB,KAAK,EAAE;MAAEC,SAAS,EAAE,QAAQ;MAAEC,OAAO,EAAE;IAAO,CAAE;IAAAC,QAAA,gBACnDtB,OAAA;MAAAsB,QAAA,EAAI;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACzB1B,OAAA;MAAAsB,QAAA,GAAG,gBAAc,EAAChB,IAAI,KAAK,GAAG,GAAG,OAAO,GAAG,OAAO;IAAA;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACvD1B,OAAA,CAACH,UAAU;MAAC8B,QAAQ,EAAEvB,GAAI;MAACI,MAAM,EAAEA,MAAO;MAACoB,KAAK,EAAE;IAAI;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtD,CAAC;AAEV,CAAC;AAACxB,EAAA,CAnCID,GAAG;AAAA4B,EAAA,GAAH5B,GAAG;AAqCT,eAAeA,GAAG;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}